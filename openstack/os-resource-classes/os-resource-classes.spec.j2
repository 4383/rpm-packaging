{% set pypi_name = 'os-resource-classes' %}
{% set upstream_version = upstream_version('0.3.0') %}
{% set rpm_release = '1' %}
{% set source = url_pypi() %}

Name:           {{ py2name() }}
Version:        {{ py2rpmversion() }}
Release:        {{ py2rpmrelease() }}
Summary:        Resource Classes for OpenStack
License:        {{ license('Apache-2.0') }}
Group:          Development/Languages/Python
URL:            https://launchpad.net/{{ pypi_name }}
Source0:        {{ source }}
BuildRequires:  openstack-macros
BuildRequires:  {{ py2pkg('devel', py_versions=['py2', 'py3']) }}
BuildRequires:  {{ py2pkg('oslotest', py_versions=['py2', 'py3']) }}
BuildRequires:  {{ py2pkg('pbr', py_versions=['py2', 'py3']) }}
BuildRequires:  {{ py2pkg('python-subunit', py_versions=['py2', 'py3']) }}
BuildRequires:  {{ py2pkg('stestr', py_versions=['py2', 'py3']) }}
BuildRequires:  {{ py2pkg('testtools', py_versions=['py2', 'py3']) }}
Requires:       {{ py2pkg('pbr') }}
BuildArch:      noarch
%python_subpackages

%description
A list of standardized resource classes for OpenStack.
A resource class is a distinct type of inventory that exists in a cloud
environment, for example VCPU, DISK_GB. They are upper case with underscores.
They often include a unit in their name.
This package provides a collection of symbols representing those standard
resource classes which are expected to be available in any OpenStack deployment.
There also exists a concept of custom resource classes. These are countable
types that are custom to a particular environment. The OpenStack placement
API provides a way to create these. A custom resource class always begins
with a CUSTOM_ prefix.

%package -n python-os-resource-classes-doc
Summary:        Documentation for Resource Classes for OpenStack
Group:          Documentation/HTML
BuildRequires:  {{ py2pkg('Sphinx') }}
BuildRequires:  {{ py2pkg('openstackdocstheme') }}

%description -n python-os-resource-classes-doc
A list of standardized resource classes for OpenStack.
A resource class is a distinct type of inventory that exists in a cloud
environment, for example VCPU, DISK_GB. They are upper case with underscores.
They often include a unit in their name.
This package provides a collection of symbols representing those standard
resource classes which are expected to be available in any OpenStack deployment.
There also exists a concept of custom resource classes. These are countable
types that are custom to a particular environment. The OpenStack placement
API provides a way to create these. A custom resource class always begins
with a CUSTOM_ prefix.

This package contains the documentation.

%prep
%autosetup -p1 -n {{ pypi_name }}-%{version}
%py_req_cleanup
sed -i 's/^warning-is-error.*/warning-is-error = 0/g' setup.cfg

%build
%{python_build}
PBR_VERSION={{ upstream_version }} sphinx-build -b html doc/source doc/build/html

%install
%{python_install}

%check
%python_exec -m stestr.cli run

%files %{python_files}
%doc README.rst ChangeLog
%license LICENSE
%{python_sitelib}/os_resource_classes*
%{python_sitelib}/*.egg-info

%files -n python-os-resource-classes-doc
%doc doc/build/html
%license LICENSE

%changelog
