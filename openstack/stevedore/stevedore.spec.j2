{% set pypi_name = 'stevedore' %}
{% set upstream_version = upstream_version('1.30.0') %}
{% set rpm_release = '1' %}
{% set source = url_pypi() %}

Name:           {{ py2name() }}
Version:        {{ py2rpmversion() }}
Release:        {{ py2rpmrelease() }}
Summary:        Manage dynamic plugins for Python applications
License:        {{ license('Apache-2.0') }}
Group:          Development/Languages/Python
URL:            https://docs.openstack.org/developer/stevedore/
Source0:        {{ source }}
BuildRequires:  openstack-macros
BuildRequires:  {{ py2pkg('devel', py_versions=['py2', 'py3']) }}
BuildRequires:  {{ py2pkg('docutils', py_versions=['py2', 'py3']) }}
BuildRequires:  {{ py2pkg('mock', py_versions=['py2', 'py3']) }}
BuildRequires:  {{ py2pkg('pbr', py_versions=['py2', 'py3']) }}
BuildRequires:  {{ py2pkg('setuptools', py_versions=['py2', 'py3']) }}
BuildRequires:  {{ py2pkg('stestr', py_versions=['py2', 'py3']) }}
Requires:       {{ py2pkg('pbr') }}
Requires:       {{ py2pkg('six') }}
BuildArch:      noarch
%python_subpackages

%description
Python makes loading code dynamically easy, allowing you to configure
and extend your application by discovering and loading extensions
(plugins) at runtime. Many applications implement their own
library for doing this, using ``__import__`` or ``importlib``.
stevedore avoids creating yet another extension
mechanism by building on top of setuptools entry points. The code
for managing entry points tends to be repetitive, though, so stevedore
provides manager classes for implementing common patterns for using
dynamically loaded extensions.

%package -n python-stevedore-doc
Summary:        Documentation for %{name}
Group:          Documentation/HTML
BuildRequires:  {{ py2pkg('Sphinx', py_versions=['py2', 'py3']) }}
Provides:       %{python_module stevedore-doc = %{version}}

%description -n python-stevedore-doc
Python makes loading code dynamically easy, allowing you to configure
and extend your application by discovering and loading extensions
(plugins) at runtime. Many applications implement their own
library for doing this, using ``__import__`` or ``importlib``.
stevedore avoids creating yet another extension
mechanism by building on top of setuptools entry points. The code
for managing entry points tends to be repetitive, though, so stevedore
provides manager classes for implementing common patterns for using
dynamically loaded extensions.

This package contains documentation in HTML format.

%prep
%autosetup -p1 -n {{ pypi_name }}-%{version}
%py_req_cleanup


%build
%python_build

# generate html docs
PBR_VERSION={{ upstream_version }} PYTHONPATH=. sphinx-build -b html doc/source doc/build/html
# remove the Sphinx-build leftovers
rm -rf doc/build/html/.{doctrees,buildinfo}

%install
%python_install

%check
%python_exec -m stestr.cli run

%files %{python_files}
%license LICENSE
%doc README.rst
%{python_sitelib}/{{ pypi_name }}
%{python_sitelib}/{{ pypi_name }}-*.egg-info

%files -n python-stevedore-doc
%license LICENSE
%doc doc/build/html

%changelog
